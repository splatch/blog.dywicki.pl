<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Framework on Splatch&#39;s devblog</title>
    <link>https://blog.dywicki.pl/category/framework/</link>
    <description>Recent content in Framework on Splatch&#39;s devblog</description>
    <generator>Hugo -- 0.147.0</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 15 Oct 2008 08:00:10 +0000</lastBuildDate>
    <atom:link href="https://blog.dywicki.pl/category/framework/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Log4j, przejrzyste komunikaty</title>
      <link>https://blog.dywicki.pl/2008/10/15/log4j-przejrzyste-komunikaty/</link>
      <pubDate>Wed, 15 Oct 2008 08:00:10 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2008/10/15/log4j-przejrzyste-komunikaty/</guid>
      <description>&lt;a href=&#34;http://logging.apache.org/log4j/&#34;&gt;Log4j&lt;/a&gt; jest najpopularniejszą biblioteką do logowania dla Javy. Została ona wydana już jakiś czas temu i w chwili obecnej rozwija się znacznie wolniej niż kiedyś, warto jednak nadmienić że społeczność wciąż dostarcza nowych możliwości. Może najpierw o samej strukturze log4j.</description>
    </item>
    <item>
      <title>Budowanie klienta usługi sieciowej w oparciu o Apache CXF</title>
      <link>https://blog.dywicki.pl/2008/09/03/budowanie-klienta-uslugi-sieciowej-w-oparciu-o-apache-cxf/</link>
      <pubDate>Wed, 03 Sep 2008 07:28:27 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2008/09/03/budowanie-klienta-uslugi-sieciowej-w-oparciu-o-apache-cxf/</guid>
      <description>&lt;p&gt;W nawiązaniu do &lt;a href=&#34;http://blog.dywicki.pl/2008/07/23/budowanie-uslugi-sieciowej-w-oparciu-o-apache-cxf/&#34;&gt;poprzedniej noty o CXFie&lt;/a&gt;, którą napisałem jakiś czas temu, gonię aby uzupełnić brak konfiguracji klienta. Sam proces jest bardzo zbliżony do tworzenia klienta w oparciu o XFire. Nie jest wymagana duża ilość kodu Javy, a w zasadzie tylko dwa pliki XML (client.xml, &lt;em&gt;myservice.xml&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Pierwszy z nich odpowiada za wczytanie wymaganych rozszerzeń CXFa oraz definicję bazowej konfiguracji fabryki z interceptorami. W interceptorach możemy skonfigurować logowanie, obsługę załączników czy standardów WS-Security etc. Wszystkie te ustawienia będą dziedziczone, a fabryki docelowych usług będą dodawać tylko adres, do odpytywania. Na koniec bean klienta będzie miał określony &lt;strong&gt;autowire&lt;/strong&gt; by nie przekazywać mu wszystkich własności.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JUnit. Pragmatyczne testy jednostkowe w Javie</title>
      <link>https://blog.dywicki.pl/2008/09/02/junit-pragmatyczne-testy-jednostkowe-w-javie/</link>
      <pubDate>Tue, 02 Sep 2008 16:51:50 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2008/09/02/junit-pragmatyczne-testy-jednostkowe-w-javie/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.dywicki.pl/wp-content/uploads/2008/09/junit.jpg&#34;&gt;&lt;img alt=&#34;Okładka książki&#34; loading=&#34;lazy&#34; src=&#34;http://blog.dywicki.pl/wp-content/uploads/2008/09/junit-209x300.jpg&#34;&gt;&lt;/a&gt;
Temat testów jednostkowych nie pojawiał się na tym blogu tak często jak &lt;a href=&#34;http://blog.dywicki.pl/category/php&#34;&gt;PHP&lt;/a&gt; czy &lt;a href=&#34;http://blog.dywicki.pl/category/jaxb&#34;&gt;JAXB&lt;/a&gt;, jakkolwiek temat ten poruszałem w 2 notach - &lt;a href=&#34;http://blog.dywicki.pl/2007/04/22/testy-jednostkowe/&#34;&gt;o testach&lt;/a&gt; oraz &lt;a href=&#34;http://blog.dywicki.pl/2007/02/01/singleton/&#34;&gt;o singletonie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tych, którzy chcieliby dowiedzieć się więcej o testach na przykładzie &lt;a href=&#34;http://junit.org&#34;&gt;JUnit&lt;/a&gt; i Javy zapraszam się do zapoznania z bardzo dobrą pozycją na temat testów jednostkowych, z którą miałem przyjemność się zetknąć.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Agavi 0.11 RC5</title>
      <link>https://blog.dywicki.pl/2007/06/18/agavi-011-rc5/</link>
      <pubDate>Mon, 18 Jun 2007 21:41:11 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2007/06/18/agavi-011-rc5/</guid>
      <description>Dzisiaj rano światło dzienne ukazało się Agavi 0.11 RC5, oprócz poprawek błędów z wersji RC4 doszło parę nowości:</description>
    </item>
    <item>
      <title>Eclipse Persistence Services Project</title>
      <link>https://blog.dywicki.pl/2007/06/13/eclipse-persistence-services-project/</link>
      <pubDate>Tue, 12 Jun 2007 23:11:19 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2007/06/13/eclipse-persistence-services-project/</guid>
      <description>Dzisiaj (w zasadzie wczoraj) w otchłani skrzynki odbiorczej &lt;a href=&#34;http://rssowl.org/&#34;&gt;RSSOwl&lt;/a&gt; znalazłem &lt;a href=&#34;http://www.eclipse.org/proposals/eclipselink/&#34;&gt;link do propozycji&lt;/a&gt; wspomnianego projektu.</description>
    </item>
    <item>
      <title>Agavi 0.11 RC3, flow</title>
      <link>https://blog.dywicki.pl/2007/02/24/agavi-011-rc3-flow/</link>
      <pubDate>Fri, 23 Feb 2007 22:48:53 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2007/02/24/agavi-011-rc3-flow/</guid>
      <description>&lt;p&gt;Mam niebywałą przyjemność oznajmić, że dnia &lt;a href=&#34;http://trac.agavi.org/log/tags/0.11.0RC3&#34;&gt;23 lutego&lt;/a&gt; zostało wydane, jak sam tytuł posta wskazuje, Agavi 0.11 RC3. Do pierwszej, w pełni stabilnej wersji jest już coraz bliżej.
Zgodnie z rozkładem jazdy został otwarty &lt;a href=&#34;http://trac.agavi.org/ticket/340&#34;&gt;jeden ticket&lt;/a&gt;, którego realizacja została odsunięta na sam koniec. Mianowicie, opis migracji z wersji 0.10 do 0.11. Ogrom zmian, które przetaczały się przez trunk repozytorium mógł przyprawić o zawrót głowy. Zmiany z rewizji na rewizję potrafiły w jednym momencie zniszczyć skrzętnie budowane narzędzia, które opierały się na zmieniających się wciąż mechanizmach.
Co zyskało Agavi o wersji 0.10? Przede wszystkim developerzy uwolnili projekt od niezręcznej i nieporęcznej konfiguracji w plikach INI, która poza łatwością odczytu nastręczała przede wszystkim problemów&amp;hellip; a to brak hierarchiczności, brak możliwości łączenia konfiguracji, w końcu brak narzędzia do walidacji zapisanych danych. W poście &amp;quot; &lt;a href=&#34;https://blog.dywicki.pl/2006/09/07/dlaczego-konfiguracja-w-xml/&#34;&gt;Dlaczego konfiguracja w XML&lt;/a&gt;&amp;quot; porównywałem XML również do YAMLa.
Sporą zmianą, naturalnie, na lepsze było zrezygnowanie z tradycyjnego flowu Mojavi 3. Do tej pory wyglądało to w ten sposób, że każda akcja miała metodę getRequestMethods, która zwracała informacje o tym w jaki sposób dostępna jest akcja. Czy to GET, POST, bądź cokolwiek (odpowiednie stałę w klasie Request - GET, POST, NONE). Teraz o sposób dostępu do akcji determinuje nazw akcji. Akcja o nazwie executeRead będzie wykonana w chwili żądania typu GET. Metoda o nazwie executeWrite będzie wykonana w chwili gdy otrzymamy formularz via POST. Metoda execute będzie wykonywana zawsze (o ile walidacja przebiegnie bez zakłuceń). Zysk z tego jest taki, że implementacja różnych kontrolerów nie wpływa na kształt akcji. W chwili gdy wiązały się z tym stałe GET/POST implementacja wywołań z poziomu konsoli była ciężka. W zapowiedziach pojawia się ConsoleRequest, ponieważ z Agavi 0.11 wyleciały kontrolery zależne od kontekstu. Jest jeden &lt;a href=&#34;http://trac.agavi.org/browser/tags/0.11.0RC3/src/controller/AgaviController.class.php&#34;&gt;Controller&lt;/a&gt;, różne są implementacje requestu vide &lt;a href=&#34;http://trac.agavi.org/browser/tags/0.11.0RC3/src/request/AgaviConsoleRequest.class.php&#34;&gt;ConsoleRequest&lt;/a&gt; (jeszcze niegotowy, będzie w 1.0), &lt;a href=&#34;http://trac.agavi.org/browser/tags/0.11.0RC3/src/request/AgaviWebRequest.class.php&#34;&gt;WebRequest&lt;/a&gt; oraz &lt;a href=&#34;http://trac.agavi.org/browser/tags/0.11.0RC3/src/request/AgaviSecureWebRequest.class.php&#34;&gt;SecureWebRequest&lt;/a&gt;.
W międzyczasie pożegnaliśmy również stałe View::SUCCESS, ERROR, INPUT, ALERT, a metoda &lt;a href=&#34;http://trac.agavi.org/browser/tags/0.11.0RC3/samples/app/modules/Default/actions/IndexAction.class.php#L69&#34;&gt;getDefaultViewName&lt;/a&gt; każdej akcji zwraca po prostu suffix do nazwy widoku (np. metoda akcji &amp;ldquo;Cart&amp;rdquo; zwraca wartość &amp;ldquo;Product&amp;rdquo;, stąd klasa widoku to CartProductView).
Co więcej w połączeniu z innym mechanizmem &lt;a href=&#34;https://blog.dywicki.pl/2007/02/22/agavi-output-types/&#34;&gt;Agavi, Output types&lt;/a&gt;, zmiany formatu widoku oraz języka nie wiążą się z implementacją bądź powielaniem logiki biznesowej. Implementujemy tylko logikę związaną z widokiem.
Warto również wspomnieć, że od tej chwili &lt;strong&gt;metoda Controller::forward(module, action) jak i samo używanie powiązanych akcji jest odradzane&lt;/strong&gt;, jako źródło potencjalnych problemów (dlaczego widok nie jest uruchamiany) tym bardziej, że tworzenie widoków i akcji załatwia samo Agavi przez taski dla &lt;a href=&#34;http://phing.info&#34;&gt;Phinga&lt;/a&gt;. W chwili, gdy chcemy użyć innego widoku, spoza tych, które dostarcza sama akca po prostu zwracamy array(module, view name, parameters). Zniknęła również możliwości zrobienia forwarda z widoku (ogólnie problemy z request methods, to co było post-only nie szło przy fowardzie przy żądaniu otrzymanym via get), co wydaje się jak najbardziej uzasadnione.
Widok nie jest organem decyzyjnym, który powinien wskazywać na wykonanie logiki biznesowej. Nie mniej jest możliwość przekierowania do widoku innej akcji.. poprzez redirect bądź poprzez zwrócenie array(module, view name, parameters).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Agavi, Output types</title>
      <link>https://blog.dywicki.pl/2007/02/22/agavi-output-types/</link>
      <pubDate>Thu, 22 Feb 2007 20:41:37 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2007/02/22/agavi-output-types/</guid>
      <description>&lt;p&gt;Jedną z nowości jaką niesie Agavi w wersji &amp;gt; 0.10 jest mechanizm output types. Jest to bardzo proste rozwiązanie, które umożliwia uniknięcie gimnastyki z tworzeniem widoków w różnych technologiach, z którymi wiąże się różna logika. Banalny przykład. Te same dane prezentujemy w postaci HTML jak i PDF a do tego możemy je pobierać przez XmlHttpRequest. Dane są praktycznie identyczne, różny jest format wynikowy i proces jego tworzenia. Dla zwykłej strony wskazujemy szablon, dorzucamy dane i koniec, dla XmlHttp zwracamy JSONa. Stworzenie outputu w formacie PDF nie będzie tak proste jak pozostałych, ponieważ konieczne będzie stworzenie układu strony, dorzucenie fontów etc. Ogólnie w żaden sposób nie da się połączyć tych formatów w jednym widoku bez sporej ilości warunków i &amp;ldquo;protez&amp;rdquo;. By uniknąć zakopania się w tym wszystkim zwykle tworzy się dodatkową akcję, która w sporej części pokrywała się z pierwotną a różni się tylko widokiem i szablonami. Począwszy od Agavi 0.11 problem przestaje istnieć.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zend Framework i inni</title>
      <link>https://blog.dywicki.pl/2006/10/03/zend-framework-and-others/</link>
      <pubDate>Tue, 03 Oct 2006 18:54:39 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/10/03/zend-framework-and-others/</guid>
      <description>&lt;p&gt;Zend od jakiegoś czasu rozwija z powodzeniem swój framework. Szturmuje on rynek dzięki wsparciu firmy i dobrej dokumentacji. Zastanawia mnie jednak, dlaczego inni zaczęli kopiować to co w ZF jest. Rozumiem konwencję nazewniczą, ok - to może komuś się podobać, rozumiem strukturę katalogów, może ktoś uzna ją za logiczną.. Nie mniej nazewnictwo i struktura prawdę mówiąc nie różni się niczym od tego co było standardem w PEAR.&lt;/p&gt;
&lt;p&gt;Co więcej, niektórzy po prostu przepisują spore fragmenty kodu, które są w ZF na swoje. Zapytam po co? Skoro jest coś podobnego w Zendzie to jaki sens jest w powielaniu praktycznie tego samego (Zend::loadClass, ZendRegistry, Zend_Router_Rewrite itp.)? Pomijam fakt, że &lt;a href=&#34;http://framework.zend.com/wiki/display/ZFDEV/Home&#34;&gt;Zend jest otwarty w tej chwili i na pomysły i na ludzi&lt;/a&gt; i zapytam, czy to ma jakiś sens?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mojavi 4. Dlaczego nie?</title>
      <link>https://blog.dywicki.pl/2006/08/30/mojavi-4-dlaczego-nie/</link>
      <pubDate>Wed, 30 Aug 2006 21:14:57 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/08/30/mojavi-4-dlaczego-nie/</guid>
      <description>&lt;p&gt;Od publikacji ostatniej noty parę osób proponowało mi podjęcie prac nad Mojavi 4. Chcę wyjaśnić, dlaczego Mojavi 4 nie będę się zajmował.&lt;/p&gt;
&lt;p&gt;1. Nie ma nikogo kto byłby w stanie pomóc mi przy projekcie. Obaj byli developerzy zakończyli swoją przygodę z PHP. Nie ma również żadnej społeczności, która jest w stanie zająć się forum, wyłapywaniem błędów - jednym słowem - to by było to samo co robiłem wcześniej przy własnym frameworku.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pożegnanie.</title>
      <link>https://blog.dywicki.pl/2006/08/27/pozegnanie/</link>
      <pubDate>Sun, 27 Aug 2006 21:14:42 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/08/27/pozegnanie/</guid>
      <description>&lt;p&gt;Dzisiejszego dnia chciałem napisać coś o Creole by pokazać, że ten sterownik oferuje ciekawą funkcjonalność, ale nie będzie o tym.&lt;/p&gt;
&lt;p&gt;To co zmieniło moje zamiary to rozmowa z Tylerem Tomphinsem, osobą prowadzącą od dłuższego czasu projekt Mojavi.&lt;/p&gt;
&lt;p&gt;Kontakt z Tylerem jest ciężki, ponieważ on mieszka po drugiej stronie globu. Nasze rozmowy do tej pory wyglądały inaczej, niestety ta, którą zakończyłem przed chwilą zmienia wszystko.&lt;/p&gt;
&lt;p&gt;Dowiedziałem się, że Mojavi 4 zostaje zawieszone. Framework, w którym pokładałem ogromne nadzieje, który miał szanse zmienić nieco oblicze aplikacji pisanych w PHP umiera. Można powiedzieć, że historia się powtórzyła, jest to samo co z trójką (mike_mech wykrakał), która została zawieszona dawno, dawno temu. Ówczesny lider projektu - Sean Kerr zrezygnował z jego prowadzenia na rzecz Tylera..&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zend Framework-MVC dalekie jest mu</title>
      <link>https://blog.dywicki.pl/2006/07/12/zend-framework-mvc-dalekie-jest-mu/</link>
      <pubDate>Wed, 12 Jul 2006 21:23:41 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/07/12/zend-framework-mvc-dalekie-jest-mu/</guid>
      <description>&lt;p&gt;Zaprawdę, zaprawdę powiadam Wam drodzy czytelnicy Zend Framework do pełnej implementacji MVC ma jeszcze bardzo duży kwał drogi.&lt;/p&gt;
&lt;p&gt;Dzisiejszego dnia postanowiłem poświęcić parę minut na bliższe spotkanie z ZF. Jak się szybko okazało nie był to czas spędzony bezowocnie. Utrwaliłem się w przekonaniu, że ZF to nie jest to czego szukam oraz znalazłem buga i to dość niewygodnego.. ;)&lt;/p&gt;
&lt;p&gt;Dlaczego moje uprzedzenie do ZF nie zmalało a tylko wzrosło? Dlatego, że to co w sumie zobaczyłem odbiega od znanego mi (z innych frameworków) MVC. Może potraktuję Was tutaj odrobiną kodu:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pierwsze kroki z Mojavi 4</title>
      <link>https://blog.dywicki.pl/2006/05/07/pierwsze-kroki-z-mojavi-4/</link>
      <pubDate>Sun, 07 May 2006 21:49:14 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/05/07/pierwsze-kroki-z-mojavi-4/</guid>
      <description>&lt;h3 id=&#34;pierwsze-kroki-z-mojavi-4&#34;&gt;Pierwsze kroki z Mojavi 4&lt;/h3&gt;
&lt;p&gt;Tradycyjnie już Mojavi jest dość trudnym frameworkiem do opanowania dla początkujących. Wiele razy, podczas rozwiązywania zawiłych problemów które pojawiają się na samym początku padają przekleństwa. By tego uniknąć powstał ten oto artykuł który zakłada, że znasz MVC oraz podstawy Mojavi (wiesz czym jest web framework).&lt;/p&gt;
&lt;h3 id=&#34;wchodzimy-wprowadzenie&#34;&gt;Wchodzimy, wprowadzenie&lt;/h3&gt;
&lt;p&gt;By zacząć pisać aplikacje przy użyciu Mojavi 4 będziesz potrzebował komputer z zainstalowanym &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;serverem http&lt;/a&gt; oraz &lt;a href=&#34;http://php.net/&#34;&gt;PHP5&lt;/a&gt;. Jeśli masz już działający serwer, będziesz potrzebował &lt;a href=&#34;http://subversion.tigris.org/&#34;&gt;subversion&lt;/a&gt;, by pobrać przy jego pomocy kopię Mojavi na swój serwer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Osiągi i marzenia</title>
      <link>https://blog.dywicki.pl/2006/05/06/osiagi-i-marzenia/</link>
      <pubDate>Sat, 06 May 2006 00:44:08 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/05/06/osiagi-i-marzenia/</guid>
      <description>&lt;p&gt;Mojavi 4 przeszło długą drogę - od &lt;a href=&#34;http://forum.mojavi.org/index.php?showtopic=1236&#34;&gt;początkowych diagramów uml&lt;/a&gt;. Obecnie oferuje pełną oraz elastyczną konfigurację XML, modularną architekturę, komponenty, buforowanie, obsługę datasource&amp;rsquo;ów, wstrzykiwanie zależności, walidację oraz wiele, wiele innych. Wszystko to przechodzi na końcu przez lekkie &lt;a href=&#34;http://www.lastcraft.com/simple_test.php&#34;&gt;TDD (test driven design)&lt;/a&gt; testy sprawdzające. Wsród innych zamiarów bądź zaimplementowanych możliwości/podstawowych aspektów Mojavi 4 jest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/MVC&#34;&gt;Model View Controller&lt;/a&gt; - Najważniejsza część architektury, podstawa poprzednich frameworków Mojavi.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Mutliproject&#34;&gt;Multi-project support&lt;/a&gt; - Posiadanie różnych projektów działających na tym samym kodzie bazowym.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/EndUserFilters&#34;&gt;End-user controlled filters&lt;/a&gt; - Zawiera konfigurowalną obsługę wyjątków.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/GlobalAndForwardFilters&#34;&gt;Global and Forward Filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/ApplicationControllers&#34;&gt;Application Controllers&lt;/a&gt; - Używane do obsługi wielu następujących po sobie stron do skomplikowanych formularzy bądź wizzardów &lt;em&gt;(kreatorów)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Autoloader&#34;&gt;Sophisticated autoload support&lt;/a&gt; - bardzo, bardzo przydatny mechanizm do automatczynego dołączania klas/interfejsów, również z Twoich własnych bibliotek!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Validators&#34;&gt;Easy Validation?&lt;/a&gt; - Walidacja zawsze jest trudnym elementem do wprowadzenia w aplikacji. Myślimy, że mamy za sobą pracę, która sprawia, że ten częsty i niemiły element staje się łatwy do oprogramowania.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Helpers&#34;&gt;Helpers&lt;/a&gt; - Pomocnicy są zbiorem szybkich bibliotek do użytku w całym frameworku (częston ich użycie oczyszcza logikę aplikacji).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Renderers&#34;&gt;Renderers?&lt;/a&gt; - Wspólny interfejs dla silników szablonów. Renderery umożliwiają zmiany pomiędzy silnikami w prosty sposób.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Logging&#34;&gt;Logger?&lt;/a&gt; - Tak jak wszystko, aplikacje w Mojavi potrzebują logowania!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Datastructures&#34;&gt;Datastructures?&lt;/a&gt; - Średniej wielkości zbiór klas, które dostarczają implementacji wspólnych wzorców struktór danych, takich jak stack &lt;em&gt;stos&lt;/em&gt;, queue &lt;em&gt;kolejka&lt;/em&gt; lub &lt;em&gt;chain&lt;/em&gt; łańcuch.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/ServiceLocator&#34;&gt;Service Locator&lt;/a&gt; - Wstrzykiwanie zależności jest gorącym tematem. W skrócie, domyślny Service Locator z Mojavi 4 jest stworzony na bazie wstrzykiwania zależności. Można z niego korzystać w całej aplikacji bez żadnych zobowiązań w kodzie.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Containers&#34;&gt;Containers&lt;/a&gt; - Wszyscy potrzebujemy kontenerów. &lt;em&gt;;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Module&#34;&gt;Modules?&lt;/a&gt; - the Module series classes provide a programmic way to interface with the various pieces of your application. &lt;em&gt;tego nie jestem w stanie przetłumaczyć.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/Layouts&#34;&gt;Easy Layouts?&lt;/a&gt; - layouty umożliwiają stworzenie wspólnego wyglądu i wykorzystanie go na wielu stronach &lt;em&gt;w wielu widokach&lt;/em&gt; bez kopiowania kodu.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trac.mojavi.org/wiki/Mojavi4/i18n&#34;&gt;Internationalization&lt;/a&gt; - Internationalization, otherwise known as i18n, or l10n, is a term used to refer to a process revolving around the end goal of creating an application which can be easily ported to a new audience in terms of content language and data formatting. &lt;em&gt;tego również nie jestem w stanie przetłumaczyć.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oryginał &lt;a href=&#34;http://trac.mojavi.org/wiki/&#34;&gt;http://trac.mojavi.org/wiki/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Czym będzie Mojavi 4</title>
      <link>https://blog.dywicki.pl/2006/05/06/czy-bedzie-mojavi-4/</link>
      <pubDate>Fri, 05 May 2006 23:23:45 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/05/06/czy-bedzie-mojavi-4/</guid>
      <description>&lt;p&gt;Mojavi 4 jest najnowszą generacją tego projektu, wiodącego frameworka MVC w PHP przez wiele lat. Wydanie te następuje po długiej histori frameworków pisanych wyłącznie przez &lt;a href=&#34;http://trac.mojavi.org/wiki/People/SeanKerr&#34;&gt;Seana Kerra&lt;/a&gt;. Pod koniec 2005 Sean zrezygnował z prowadzenia Mojavi przekazując swoją dotychczasową funkcję &lt;a href=&#34;http://trac.mojavi.org/wiki/People/TylerTompkins&#34;&gt;Tylerowi Tompkinsowi&lt;/a&gt;, który został głównym architektem Mojavi 4.&lt;/p&gt;
&lt;p&gt;Mojavi 4 jest bardzo ambitnym projektem, który ma na celu stworzenie dla PHP odpowiednika tego czym jest jądro linuksa przy tworzeniu systemów operacyjnych. Maksymlna elastyczność, zastosowania lekkie bądź ciężke, delikatne oraz trwałe dzięki zastosowanemu frameworkowi. Domyślnie Mojavi 4 powinno być spójnym frameworkiem który nie zawiera warstwy dostępu do danych (data access layer) , chociaż oczywiście będzie obsługiwać rzeczy takie jak połączenia z bazą, ftp i tym podobne. &lt;em&gt;Czyt&lt;/em&gt;
&lt;em&gt;aj - twórcy Mojavi nie zamierzają tworzyć kolejnego Ado DB tudzież Creole.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>View Layout i Agavi</title>
      <link>https://blog.dywicki.pl/2006/05/05/view-layout-i-agavi/</link>
      <pubDate>Fri, 05 May 2006 11:17:54 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/05/05/view-layout-i-agavi/</guid>
      <description>Zainspirowany ideą Layotów w M4 postanowiłem stworzyć małą wtyczkę do agavi, która umożliwi mi korzystanie z tego rozwiązania. Jest ona bardzo prosta i ułatwia masową zmianę szablonu głównego oraz slotów (o slotach jeszcze będę pisał).</description>
    </item>
    <item>
      <title>Zend Framework i Propel</title>
      <link>https://blog.dywicki.pl/2006/04/27/zend-framework-i-propel-2/</link>
      <pubDate>Thu, 27 Apr 2006 19:08:42 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/04/27/zend-framework-i-propel-2/</guid>
      <description>&lt;p&gt;Zend nabiera tempa. Po wpinaniu do ZF smarty przyszła kolej i na Propela. Artykuł o tym znajdziecie na &lt;a href=&#34;http://devzone.zend.com/node/view/id/184&#34;&gt;Zend Developer Zone&lt;/a&gt;. Zainteresowani zapewne się znajdą. :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mojavi 4, z bliska.</title>
      <link>https://blog.dywicki.pl/2006/04/25/mojavi-4-z-bliska/</link>
      <pubDate>Tue, 25 Apr 2006 21:22:08 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/04/25/mojavi-4-z-bliska/</guid>
      <description>Tak jak obiecałem informacje na temat zmian w Mojavi 4.
Mojavi jest jednym ze starszych frameworków dla PHP. Swoje korzenie ma jeszcze w PHP4 kiedy to powstała pierwsza (na chwilę obecną), ostatnia stabilna wersja – Mojavi 2.0. Po wejściu PHP5 okazało się, że M2 nie jest kompatybilne z nowym interpreterem. Zaczęło powstawać Mojavi 3. Istnieje również Yuma – Mojavi 2 zgodne z PHP5. W pewnym momencie grupa (a właściwie jedyna osoba) tworząca Mojavi zdecydowała, że projekt jest nienajlepszy. Mimo wszystko była to tylko kontynuacja M2, bez wykorzystania możliwości PHP5, oparta na klasach. M3 zostało wstrzymane a Sean Kerr (na forum illusina) zaczął tworzyć Mojavi 4. M3 utkęło w fazie DEV. Mimo wszystko framework jest bardzo stabilny, sam z niego korzystałem kilka razy i nie było problemów. Wszystko czego potrzeba było to tylko kilka komponentów, które można pobrać z sieci (między innymi SmartyView). Aby praca włożona w M3 nie poszła na daremne projekt przejął Tyler Tompkins. Tak powstało Agavi. Agavi oferuje dodatkową funkcjonalność, usuwa niektóre problemy z Mojavi (min. problem z nazwami klas), oferuje również wbudowane komponenty, których brakowało Mojavi:
- SmartyView
- XSLTView
- CreoleDatabase
- PropelDatabase
- AdoDBDatabase
- PDODatabase
- ukończony mechanizm logowania
- zaczątki modelu (na forum Agavi jest do pobrania ActiveRecord rodem z Cake/Rails)
- ReturnArrayConfigHandler
- ConsoleController
- ConsoleRequest
- HTTPSRequest
- CreoleStorage
- wsparcie dla Phinga – taski do tworzenia projektu, modulu, akcji, widoku, unit-testów).
- bodajże DateValidator
- FormPHPView (ma być w krótce usunięty).</description>
    </item>
    <item>
      <title>Zend Manual.</title>
      <link>https://blog.dywicki.pl/2006/04/24/zend-manual/</link>
      <pubDate>Mon, 24 Apr 2006 05:51:09 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/04/24/zend-manual/</guid>
      <description>&lt;p&gt;Manual do Zend Frameworka, zajrzałem tam dopiero dzisiaj, ale dobrze wiedzieć, że jest jakaś biblioteka do PDF, która ma dokumentacje na dobrym poziomie.
Jeśli zend będzie prowadził dokumentacje w taki sposób ma spore szanse na to by pobić konkurencje.
Manual znajdziecie pod adresem &lt;a href=&#34;http://framework.zend.com/manual&#34; title=&#34;ZF&#34;&gt;http://framework.zend.com/manual&lt;/a&gt;
Dokumentacja do &lt;a href=&#34;http://framework.zend.com/manual/en/zend.pdf.html&#34; title=&#34;ZF_PDF&#34;&gt;Zend_PDF&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why not Zend Framework?</title>
      <link>https://blog.dywicki.pl/2006/02/23/why-not-zend-framework/</link>
      <pubDate>Thu, 23 Feb 2006 00:40:14 +0000</pubDate>
      <guid>https://blog.dywicki.pl/2006/02/23/why-not-zend-framework/</guid>
      <description>&lt;p&gt;Patrząc na to co się dzieje wokół ZFa odnoszę bardzo negatywne wrażenie. Dlaczego? Dlatego, że jest to powielanie tego, co już powstało dla PHP. Nie widzę w tym, co proponuje Zend nowości, świerzości. Wiem, że trudno o to przy implementacji MVC, ale ZF nic nie wnosi do tematu, do tego bardzo skromne informacje jakie są na temat ZF nie napawają optymizmem.&lt;/p&gt;
&lt;p&gt;Powody dla których Zend tworzy kolejnego frameworka:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zachowanie konkurencyjności względem innych języków i platform .NET, J2EE, Ruby&lt;/li&gt;
&lt;li&gt;brak prostego frameworka dla PHP&lt;/li&gt;
&lt;li&gt;swobodne użycie dla zastosowań e-commerce&lt;/li&gt;
&lt;li&gt;pełne wykorzystanie możliwości PHP5&lt;/li&gt;
&lt;li&gt;wsparcie dla nowoczesnych technologii - Web Services, RSS, wsparcie dla AJAXa&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moje uwagi&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
